{
  "address": "0x272743eB203436C489B5CD919762b8939f6790e9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "transactions",
          "type": "bytes"
        }
      ],
      "name": "multiSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeb500eeef4bde8a101e4c416e6d5020ef803d2ee60f25b8b8b55f8744faa1a07",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xFC72c97DC841AE43d5A302dcB43D8682AFdbB2dc",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "203548",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf3aab302b18bd488f037cb8ea4d3c13918a326ddbf8911ab3d827c4bbb33a67a",
    "transactionHash": "0xeb500eeef4bde8a101e4c416e6d5020ef803d2ee60f25b8b8b55f8744faa1a07",
    "logs": [],
    "blockNumber": 24022170,
    "cumulativeGasUsed": "355260",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c1aab00b9a4529d51c507014a6e782a4",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transactions\",\"type\":\"bytes\"}],\"name\":\"multiSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Nick Dodson - <nick.dodson@consensys.net>Gon\\u00e7alo S\\u00e1 - <goncalo.sa@consensys.net>Stefan George - <stefan@gnosis.io>Richard Meissner - <richard@gnosis.io>\",\"kind\":\"dev\",\"methods\":{\"multiSend(bytes)\":{\"details\":\"Sends multiple transactions and reverts all if one fails.\",\"params\":{\"transactions\":\"Encoded transactions. Each transaction is encoded as a packed bytes of                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),                     to as a address (=> 20 bytes),                     value as a uint256 (=> 32 bytes),                     data length as a uint256 (=> 32 bytes),                     data as bytes.                     see abi.encodePacked for more information on packed encoding\"}}},\"title\":\"Multi Send - Allows to batch multiple transactions into one.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/MultiSend.sol\":\"MultiSend\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/MultiSend.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n\\n/// @title Multi Send - Allows to batch multiple transactions into one.\\n/// @author Nick Dodson - <nick.dodson@consensys.net>\\n/// @author Gon\\u00e7alo S\\u00e1 - <goncalo.sa@consensys.net>\\n/// @author Stefan George - <stefan@gnosis.io>\\n/// @author Richard Meissner - <richard@gnosis.io>\\ncontract MultiSend {\\n\\n    bytes32 constant private GUARD_VALUE = keccak256(\\\"multisend.guard.bytes32\\\");\\n\\n    bytes32 guard;\\n\\n    constructor() {\\n        guard = GUARD_VALUE;\\n    }\\n\\n    /// @dev Sends multiple transactions and reverts all if one fails.\\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\\n    ///                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),\\n    ///                     to as a address (=> 20 bytes),\\n    ///                     value as a uint256 (=> 32 bytes),\\n    ///                     data length as a uint256 (=> 32 bytes),\\n    ///                     data as bytes.\\n    ///                     see abi.encodePacked for more information on packed encoding\\n    function multiSend(bytes memory transactions)\\n        public\\n    {\\n        require(guard != GUARD_VALUE, \\\"MultiSend should only be called via delegatecall\\\");\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            let length := mload(transactions)\\n            let i := 0x20\\n            for { } lt(i, length) { } {\\n                // First byte of the data is the operation.\\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\\n                // This will also zero out unused data.\\n                let operation := shr(0xf8, mload(add(transactions, i)))\\n                // We offset the load address by 1 byte (operation byte)\\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\\n                let value := mload(add(transactions, add(i, 0x15)))\\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\\n                let dataLength := mload(add(transactions, add(i, 0x35)))\\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\\n                let data := add(transactions, add(i, 0x55))\\n                let success := 0\\n                switch operation\\n                case 0 { success := call(gas(), to, value, data, dataLength, 0, 0) }\\n                case 1 { success := delegatecall(gas(), to, data, dataLength, 0, 0) }\\n                if eq(success, 0) { revert(0, 0) }\\n                // Next entry starts at 85 byte + data length\\n                i := add(i, add(0x55, dataLength))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x91a8ae59355cfe33238117fb2169621cff2dd2b90e5f8d44ff663712d6d3bef7\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b507f89232e6dba5a1949e493f5034fcd46db3c1ee01386363067973d7739bc50b63e600081905550610258806100476000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638d80ff0a14610030575b600080fd5b6100e96004803603602081101561004657600080fd5b810190808035906020019064010000000081111561006357600080fd5b82018360208201111561007557600080fd5b8035906020019184600183028401116401000000008311171561009757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506100eb565b005b7f89232e6dba5a1949e493f5034fcd46db3c1ee01386363067973d7739bc50b63e6000541415610166576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806101f36030913960400191505060405180910390fd5b805160205b818110156101ed578083015160f81c6001820184015160601c6015830185015160358401860151605585018701600085600081146101b057600181146101c0576101cb565b6000808585888a5af191506101cb565b6000808585895af491505b5060008114156101da57600080fd5b826055018701965050505050505061016b565b50505056fe4d756c746953656e642073686f756c64206f6e6c792062652063616c6c6564207669612064656c656761746563616c6ca264697066735822122006c447e9f2ec6c689bce3a5336bdff684ef35fb3a36d5115b884a63f74be9c9c64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80638d80ff0a14610030575b600080fd5b6100e96004803603602081101561004657600080fd5b810190808035906020019064010000000081111561006357600080fd5b82018360208201111561007557600080fd5b8035906020019184600183028401116401000000008311171561009757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506100eb565b005b7f89232e6dba5a1949e493f5034fcd46db3c1ee01386363067973d7739bc50b63e6000541415610166576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806101f36030913960400191505060405180910390fd5b805160205b818110156101ed578083015160f81c6001820184015160601c6015830185015160358401860151605585018701600085600081146101b057600181146101c0576101cb565b6000808585888a5af191506101cb565b6000808585895af491505b5060008114156101da57600080fd5b826055018701965050505050505061016b565b50505056fe4d756c746953656e642073686f756c64206f6e6c792062652063616c6c6564207669612064656c656761746563616c6ca264697066735822122006c447e9f2ec6c689bce3a5336bdff684ef35fb3a36d5115b884a63f74be9c9c64736f6c63430007060033",
  "devdoc": {
    "author": "Nick Dodson - <nick.dodson@consensys.net>Gonçalo Sá - <goncalo.sa@consensys.net>Stefan George - <stefan@gnosis.io>Richard Meissner - <richard@gnosis.io>",
    "kind": "dev",
    "methods": {
      "multiSend(bytes)": {
        "details": "Sends multiple transactions and reverts all if one fails.",
        "params": {
          "transactions": "Encoded transactions. Each transaction is encoded as a packed bytes of                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),                     to as a address (=> 20 bytes),                     value as a uint256 (=> 32 bytes),                     data length as a uint256 (=> 32 bytes),                     data as bytes.                     see abi.encodePacked for more information on packed encoding"
        }
      }
    },
    "title": "Multi Send - Allows to batch multiple transactions into one.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3918,
        "contract": "contracts/libraries/MultiSend.sol:MultiSend",
        "label": "guard",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      }
    }
  }
}